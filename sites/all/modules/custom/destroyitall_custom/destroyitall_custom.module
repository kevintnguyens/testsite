<?php

/**
 * @file
 * Custom destroyitall Code
 */

/**
 * Implements hook_views_default_views_alter()
 *
 * Removes Ajax from admin views
 */
function destroyitall_custom_views_default_views_alter(&$views) {
  if (isset($views['admin_views_comment'])) {
    $views['admin_views_comment']->display['default']->display_options['use_ajax'] = FALSE;
  }
  if (isset($views['admin_views_node'])) {
    $views['admin_views_node']->display['default']->display_options['use_ajax'] = FALSE;
  }
  if (isset($views['admin_views_taxonomy_term'])) {
    $views['admin_views_taxonomy_term']->display['default']->display_options['use_ajax'] = FALSE;
  }
  if (isset($views['admin_views_user'])) {
    $views['admin_views_user']->display['default']->display_options['use_ajax'] = FALSE;
  }
}

/*
 * Implements hook_update_projects_alter()
 */
function destroyitall_custom_update_projects_alter(&$projects) {
  $patched = array();

  foreach($projects as $key => $project) {
    if (preg_match('/^destroyitall_.*$/', $key) || in_array($key, $patched)) {
      unset($projects[$key]);
    }
  }
}

/*
 * Implements hook_permission()
 */
function destroyitall_custom_permission() {
  $permissions = array();

  // add permission for form submissions
  if (module_exists('entityform')) {
    $permissions['submit entityform types'] = array(
      'title' => t('Submit entityform types'),
      'description' => t('Submit entityforms types. Individual form access is still required.'),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 */
function destroyitall_custom_menu_alter(&$items) {
  // fix node clone
  if (!empty($items['node/%node/clone']['type'])) {
    $items['node/%node/clone']['type'] = MENU_LOCAL_TASK;
  }

  // clear unhelpful items
  unset($items['admin/content/files']);
  unset($items['admin/advanced_help']);
  unset($items['admin/help']);
  unset($items['node']);
}

/*
 * Implements hook_entity_info_alter()
 */
function destroyitall_custom_entity_info_alter(&$info) {
  // custom access callback for entityforms
  if (!empty($info['entityform_type'])) {
    $info['entityform_type']['access callback'] = 'destroyitall_custom_entityform_type_access';
  }
}

/**
 * Implements hook_form_alter()
 */
function destroyitall_custom_form_alter(&$form, &$form_state, $form_id) {
  // hide meta tags on non node forms
  if (!empty($form['metatags']) && empty($form['#node_edit_form']) && $form_id != 'metatag_config_edit_form') {
    $form['metatags']['#access'] = FALSE;
  }

  // set default content type settings
  if ($form_id == 'node_type_form' && empty($form['#node_type']->type)) {
    $form['workflow']['node_options']['#default_value'] = array(
      0 => 'status',
      1 => 'revision',
    );
    $form['submission']['node_preview']['#default_value'] = 0;
    $form['comment']['comment']['#default_value'] = 0;
    $form['display']['node_submitted']['#default_value'] = FALSE;
  }
}

/*
 * Altered access callback for entityform_type
 */
function destroyitall_custom_entityform_type_access($op, $type = NULL, $account = NULL) {
  if ($op == 'view' && user_access('submit entityform types', $account)) {
    return TRUE;
  }
  return entityform_type_access($op, $type, $account);
}

/**
 * Checks to see if the current page is a user page.
 **/
function _destroyitall_custom_is_user_page() {
  if(arg(0) == 'user' && is_null(arg(2))) {
    return TRUE;
  }
  else {
    return FALSE;
  }

  return FALSE;
}
